{"version":3,"sources":["icons/chocoboapi.png","components/Login.js","components/Register.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","state","username","password","success","document","getElementById","style","display","this","length","e","validateForm","preventDefault","payload","audience","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","token","sessionStorage","setItem","user","window","location","href","console","log","icon","require","to","className","src","alt","exact","path","component","login","register","type","placeholder","onChange","setState","target","value","onClick","handleLogin","Component","Register","firstname","email","confirmpassword","handleRegistration","Profile","parse","clear","photo","userName","roleName","firstName","handleLogout","App","basename","Navbar","profile","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8845c65e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chocoboapi.63c7ca40.png\";","import React, { Component } from 'react'\nimport { BrowserRouter as Route, Link, Redirect} from 'react-router-dom'\nimport register from './Register'\nimport login from './Login'\n\nclass Login extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      username: '',\n      password: '',\n      success: false\n    }\n  }\n\n  componentDidMount () {\n    document.getElementById('overlay').style.display = 'none'\n  }\n\n  validateForm() {\n    if (this.state.username.length > 0 && this.state.username.length > 0) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  handleLogin (e) {\n    if (this.validateForm()) {\n      document.getElementById('overlay').style.display = 'block'\n      e.preventDefault()\n      const payload = {\n        username: this.state.username,\n        password: this.state.password,\n        audience: 'MoogleApi'\n      }\n      fetch('https://chocoboapi.azurewebsites.net/v1/account/login', {\n        method: 'post',\n        headers: {\n          Accept: 'application/json, text/plain, */*',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      }).then(response => response.json())\n        .then(function(response){\n          if (response.token) {\n            sessionStorage.setItem('token', response.token);\n            sessionStorage.setItem('user', JSON.stringify(response.user));\n            window.location.href = '/profile'\n          } else {\n            console.log('failed login')\n            document.getElementById('overlay').style.display = 'none'\n          }\n        })\n      } else {\n        console.log('validation failed')\n      }\n  }\n\n  render () {\n    const icon = require('../icons/chocoboapi.png')\n    if (this.state.success === true) {\n      return <Redirect to=\"/profile\" />\n    } else\n    {\n      return (\n        <header className='form-container'>\n          <img src={icon} className='main-photo' alt='logo' />\n          <p>Enter credentials</p>\n          <Route exact path='/' component={login} />\n          <Route path='/register' component={register} />\n          <form>\n            <div className='form-group'>\n              <input type='text' className='form-control' placeholder='enter username' onChange={(e) => this.setState({ username: e.target.value })} />\n            </div>\n            <div className='form-group'>\n              <input type='password' className='form-control' placeholder='enter password' onChange={(e) => this.setState({ password: e.target.value })} />\n            </div>\n            <button type='submit' className='btn btn-primary btn-block' onClick={(e) => this.handleLogin(e)}>Login</button>\n          </form>\n          <p className='font-regular'>Or <Link to='/register' className='link'>register</Link></p>\n        </header>\n      )\n    }\n  }\n}\n\nexport default Login\n","import React, { Component } from 'react'\nimport { BrowserRouter as Route, Link, Redirect } from 'react-router-dom'\nimport login from './Login'\n\nclass Register extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      username: '',\n      firstname: '',\n      email: '',\n      password: '',\n      confirmpassword: '',\n      success: false\n    }\n  }\n\n  handleRegistration (e) {\n    e.preventDefault()\n    const payload = {\n      username: this.state.username,\n      firstname: this.state.firstname,\n      email: this.state.email,\n      password: this.state.password,\n      confirmpassword: this.state.confirmpassword,\n      audience: 'MoogleApi'\n    }\n    fetch('https://chocoboapi.azurewebsites.net/v1/account/register', {\n      method: 'post',\n      headers: {\n        Accept: 'application/json, text/plain, */*',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    }).then(response => response.json())\n      .then(function(response){\n        document.getElementById('overlay').style.display = 'none'\n        if (response.token) {\n          sessionStorage.setItem('token', response.token);\n          sessionStorage.setItem('user', JSON.stringify(response.user));\n          window.location.href = '/profile'\n        } else {\n          console.log('registration failed')\n        }\n      })\n  }\n\n  render () {\n    const icon = require('../icons/chocoboapi.png')\n    if (this.state.success === true) {\n      return <Redirect to=\"/profile\" />\n    } else\n    {\n      return (\n        <header className='form-container'>\n          <img src={icon} className='main-photo' alt='logo' />\n          <p>Sign up!</p>\n          <Route exact path='/' component={login} />\n          <Route path='/login' component={login} />\n          <form>\n            <div className='form-group'>\n              <input type='text' className='form-control' placeholder='username' onChange={(e) => this.setState({ username: e.target.value })} />\n            </div>\n            <div className='form-group'>\n              <input type='text' className='form-control' placeholder='first name' onChange={(e) => this.setState({ firstname: e.target.value })} />\n            </div>\n            <div className='form-group'>\n              <input type='email' className='form-control' placeholder='enter email' onChange={(e) => this.setState({ email: e.target.value })} />\n            </div>\n            <div className='form-group'>\n              <input type='password' className='form-control' placeholder='enter password' onChange={(e) => this.setState({ password: e.target.value })} />\n            </div>\n            <div className='form-group'>\n              <input type='password' className='form-control' placeholder='confirm password' onChange={(e) => this.setState({ confirmpassword: e.target.value })} />\n            </div>\n            <button type='submit' className='btn btn-primary btn-block' onClick={(e) => this.handleRegistration(e)}>Register</button>\n          </form>\n          <p className='font-regular'>Or <Link to='/login' className='link'>login</Link></p>\n        </header>\n      )\n    }\n  }\n}\n\nexport default Register\n","import React, { Component } from 'react'\n\nclass Profile extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      success: false,\n      user: {}\n    }\n  }\n\n  componentWillMount () {\n    document.getElementById('overlay').style.display = 'none'\n    if (sessionStorage.token) {\n      let user = JSON.parse(sessionStorage.user);\n      this.setState({\n        success: true,\n        user: user\n      })\n    }\n  }\n\n  handleLogout (e) {\n    document.getElementById('overlay').style.display = 'none'\n    sessionStorage.clear()\n  }\n\n  render () {\n    if (this.state.success === true) {\n      return (\n        <header className='form-container'>\n          <img className='profile-photo' src={this.state.user.photo} alt={this.state.user.userName} />\n          <p>{this.state.user.roleName}</p>\n          <form>\n            <div className='form-group'>\n              <input type='text' className='form-control' value={this.state.user.userName} />\n            </div>\n            <div className='form-group'>\n              <input type='text' className='form-control' value={this.state.user.firstName} />\n            </div>\n            <button type='submit' className='btn btn-primary btn-block' onClick={(e) => this.handleLogout(e)}>Logout</button>\n          </form>\n        </header>\n      )\n    } else {\n      window.location.href = '/login'\n    }\n  }\n}\n\nexport default Profile\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Navbar from 'react-bootstrap/Navbar'\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport register from './components/Register'\nimport login from './components/Login'\nimport profile from './components/Profile'\nimport './App.css'\n\nclass App extends Component {\n  render () {\n    return (\n      <Router basename='/'>\n        <Navbar className='dark-nav' />\n\n        <Route exact path='/' component={login} />\n        <Route path='/register' component={register} />\n        <Route path='/login' component={login} />\n        <Route path='/profile' component={profile} />\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}